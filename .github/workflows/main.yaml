name: Deploy Java App to AWS ASG

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17' # Adjust based on your application's requirements

    - name: Build Java Application
      run: |
        mvn clean package
        pwd

  
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Upload artifact to S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        aws s3 cp target/*.jar s3://test-soham-bucket/

    - name: Create New AMI
      id: create_ami
      run: |
        INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=restapi-app-soham" --query "Reservations[*].Instances[0].InstanceId" --output text)
        AMI_ID=$(aws ec2 create-image --instance-id $INSTANCE_ID --name "restapi-app-soham-$(date +'%Y-%m-%d-%H-%M')" --no-reboot --query "ImageId" --output text)
        echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Create Launch Template
      id: create_launch_template
      run: |
        aws ec2 delete-launch-template --launch-template-name "restapi-app-soham-template"
        # USER_DATA="#!/bin/bash\nnohup java -jar /home/ubuntu/deploy/*.jar > app.log 2>&1"
        USER_DATA=$(echo -n $'#!/bin/bash\njava -jar /home/ubuntu/deploy/restapidemo-0.0.1-SNAPSHOT.jar' | base64 -w 0)
        
        LAUNCH_TEMPLATE_ID=$(aws ec2 create-launch-template \
          --launch-template-name "restapi-app-soham-template" \
          --version-description "Initial version" \
          --launch-template-data "{
            \"ImageId\": \"${{ env.AMI_ID }}\",
            \"InstanceType\": \"t2.small\",
            \"KeyName\": \"soham-alm\",
            \"SecurityGroupIds\": [\"sg-0deb3a1062983c0ba\"],
            \"UserData\": \"${USER_DATA}\"
          }" \
          --query "LaunchTemplate.LaunchTemplateId" --output text)
        echo "LAUNCH_TEMPLATE_ID=$LAUNCH_TEMPLATE_ID" >> $GITHUB_ENV

    
    - name: Create Auto Scaling Group
      run: |
        aws autoscaling create-auto-scaling-group \
          --auto-scaling-group-name "restapi-app-soham-asg" \
          --launch-template "LaunchTemplateId=${{ env.LAUNCH_TEMPLATE_ID }},Version=1" \
          --min-size 1 \
          --max-size 2 \
          --desired-capacity 2 \
          --vpc-zone-identifier "subnet-985765b3"
    
    # - name: Check and Create or Update Auto Scaling Group
    #   run: |
    #     ASG_NAME="restapi-app-soham-asg"
    #     VPC_ZONE_IDENTIFIER="subnet-985765b3"
    #     LAUNCH_TEMPLATE="LaunchTemplateId=${{ env.LAUNCH_TEMPLATE_ID }},Version=1"
    #     MIN_SIZE=1
    #     MAX_SIZE=2
    #     DESIRED_CAPACITY=2
    
    #     # Check if the Auto Scaling Group exists
    #     if aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "$ASG_NAME" --query 'AutoScalingGroups[*].AutoScalingGroupName' --output text | grep -q "$ASG_NAME"; then
    #       echo "Auto Scaling Group $ASG_NAME exists. Updating..."
    #       aws autoscaling update-auto-scaling-group \
    #         --auto-scaling-group-name "$ASG_NAME" \
    #         --launch-template "$LAUNCH_TEMPLATE" \
    #         --min-size "$MIN_SIZE" \
    #         --max-size "$MAX_SIZE" \
    #         --desired-capacity "$DESIRED_CAPACITY" \
    #         --vpc-zone-identifier "$VPC_ZONE_IDENTIFIER"
    #     else
    #       echo "Auto Scaling Group $ASG_NAME does not exist. Creating..."
    #       aws autoscaling create-auto-scaling-group \
    #         --auto-scaling-group-name "$ASG_NAME" \
    #         --launch-template "$LAUNCH_TEMPLATE" \
    #         --min-size "$MIN_SIZE" \
    #         --max-size "$MAX_SIZE" \
    #         --desired-capacity "$DESIRED_CAPACITY" \
    #         --vpc-zone-identifier "$VPC_ZONE_IDENTIFIER"
    #     fi

    

    

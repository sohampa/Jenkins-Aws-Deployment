name: Deploy Java App to AWS ECS with CodeDeploy

on:
  workflow_dispatch:
  push:
    branches:
      - ecs-with-code-deploy

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Build Java Application
      run: mvn clean package

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker image
      env:
        IMAGE_TAG: ${{ github.sha }}
        ECR_REGISTRY: 543816070942.dkr.ecr.us-east-1.amazonaws.com
        ECR_REPOSITORY: sohampa
      run: |
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Prepare AppSpec File
      run: |
        cat <<EOF > AppSpec.yaml
        version: 0.0
        Resources:
          - TargetService:
              Type: AWS::ECS::Service
              Properties:
                TaskDefinition: PLACEHOLDER_FOR_TASK_DEFINITION
                LoadBalancerInfo:
                  ContainerName: ${{ vars.CONTAINER_NAME }}
                  ContainerPort: 80
        EOF

    - name: Update ECS Service with CodeDeploy
      env:
        CLUSTER_NAME: test
        SERVICE_NAME: ${{ vars.SERVICE_NAME }}
        CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
        IMAGE_TAG: ${{ github.sha }}
        ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      run: |
        # Get the current task definition
        CURRENT_TASK_DEF=$(aws ecs describe-services \
          --cluster $CLUSTER_NAME \
          --services $SERVICE_NAME \
          --query "services[0].taskDefinition" \
          --output text)
        
        # Fetch and clean up the task definition
        NEW_TASK_DEF=$(aws ecs describe-task-definition \
          --task-definition $CURRENT_TASK_DEF \
          --query "taskDefinition" | \
          jq 'del(.status, .revision, .taskDefinitionArn, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' | \
          jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
             '.containerDefinitions[0].image = $IMAGE')
        
        # Save the cleaned-up task definition to a file
        echo "$NEW_TASK_DEF" > new-task-def.json
        
        # Register the new task definition
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://new-task-def.json \
          --query "taskDefinition.taskDefinitionArn" \
          --output text)
        
        # Update AppSpec.yaml with the new task definition ARN
        sed -i "s|PLACEHOLDER_FOR_TASK_DEFINITION|$NEW_TASK_DEF_ARN|g" AppSpec.yaml

        # Trigger a CodeDeploy deployment
        aws deploy create-deployment \
          --application-name ${{ vars.CODEDEPLOY_APPLICATION_NAME }} \
          --deployment-group-name ${{ vars.CODEDEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --revision "revisionType=AppSpecContent,appSpecContent={\"content\":\"$(cat AppSpec.yaml)\"}"

    - name: Confirm Deployment
      run: echo "Deployment triggered via CodeDeploy!"
